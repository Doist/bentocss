// Name:            Size
// Description:     Collection of size utility classes
//
// Namespace:       `width-*`
//                  `height-*`
//                  `size-*`
//                  `responsive-*`
//
// Dependencies:    vars-base
//                  tool-responsive
//
// Based on:
//
// https://github.com/uikit/uikit/blob/v2.17.0/src/less/core/grid.less
// https://github.com/suitcss/utils-size/tree/0.7.2
//
// ========================================================================


// Variables
// ========================================================================

@size-ns:                                       @ns;

@size-important:                                !important;

@size-enable-height:                            false;
@size-enable-responsive-objects:                false;

@size-height-viewport-min-height:               600/@px;

// Ratios

@size-width-ratios-important:                   @size-important;

// breakpoint list
@size-width-ratios-breakpoints:                 false;

// unit list
@size-width-ratios-base:                        false;

@size-width-ratios-small:                       @size-width-ratios-base;
@size-width-ratios-medium:                      @size-width-ratios-base;
@size-width-ratios-large:                       @size-width-ratios-base;
@size-width-ratios-xlarge:                      @size-width-ratios-base;

// Intrinsic

// breakpoint list
@size-width-intrinsic-breakpoints:              false;


// ========================================================================
// Util: Size
// ========================================================================

// Proportional widths
// Supported ratios: 2, 3, 4, 5, 6, 8, 10, 12
//
// Objects: `width-*`
// =========================================================================

// Widths

// Halves
.width-rulesets(@width-ratio) when (@width-ratio = 2) {    
    .@{size-ns}width-1-2@{breakpoint},
    .@{size-ns}width-2-4@{breakpoint},
    .@{size-ns}width-3-6@{breakpoint},
    .@{size-ns}width-4-8@{breakpoint},
    .@{size-ns}width-5-10@{breakpoint},
    .@{size-ns}width-6-12@{breakpoint} { width: percentage(1/2) @size-width-ratios-important; }
}

// Thirds
.width-rulesets(@width-ratio) when (@width-ratio = 3) {    
    .@{size-ns}width-1-3@{breakpoint},
    .@{size-ns}width-2-6@{breakpoint},
    .@{size-ns}width-4-12@{breakpoint} { width: percentage(1/3) @size-width-ratios-important; }
    .@{size-ns}width-2-3@{breakpoint},
    .@{size-ns}width-4-6@{breakpoint},
    .@{size-ns}width-8-12@{breakpoint} { width: percentage(2/3) @size-width-ratios-important; }
}

// Quarters
.width-rulesets(@width-ratio) when (@width-ratio = 4) {    
    .@{size-ns}width-1-4@{breakpoint},
    .@{size-ns}width-2-8@{breakpoint},
    .@{size-ns}width-3-12@{breakpoint} { width: percentage(1/4) @size-width-ratios-important; }
    .@{size-ns}width-3-4@{breakpoint},
    .@{size-ns}width-6-8@{breakpoint},
    .@{size-ns}width-9-12@{breakpoint} { width: percentage(3/4) @size-width-ratios-important; }
}

// Fifths
.width-rulesets(@width-ratio) when (@width-ratio = 5) {    
    .@{size-ns}width-1-5@{breakpoint},
    .@{size-ns}width-2-10@{breakpoint} { width: percentage(1/5) @size-width-ratios-important; }
    .@{size-ns}width-2-5@{breakpoint},
    .@{size-ns}width-4-10@{breakpoint} { width: percentage(2/5) @size-width-ratios-important; }
    .@{size-ns}width-3-5@{breakpoint},
    .@{size-ns}width-6-10@{breakpoint} { width: percentage(3/5) @size-width-ratios-important; }
    .@{size-ns}width-4-5@{breakpoint},
    .@{size-ns}width-8-10@{breakpoint} { width: percentage(4/5) @size-width-ratios-important; }
}

// Sixths
.width-rulesets(@width-ratio) when (@width-ratio = 6) {    
    .@{size-ns}width-1-6@{breakpoint},
    .@{size-ns}width-2-12@{breakpoint} { width: percentage(1/6) @size-width-ratios-important; }
    .@{size-ns}width-5-6@{breakpoint},
    .@{size-ns}width-10-12@{breakpoint} { width: percentage(5/6) @size-width-ratios-important; }
}
  
// Eighths
.width-rulesets(@width-ratio) when (@width-ratio = 8) {    
    .@{size-ns}width-1-8@{breakpoint} { width: percentage(1/8) @size-width-ratios-important; }
    .@{size-ns}width-3-8@{breakpoint} { width: percentage(3/8) @size-width-ratios-important; }
    .@{size-ns}width-5-8@{breakpoint} { width: percentage(5/8) @size-width-ratios-important; }
    .@{size-ns}width-7-8@{breakpoint} { width: percentage(7/8) @size-width-ratios-important; }
}
  
// Tenths
.width-rulesets(@width-ratio) when (@width-ratio = 10) {    
    .@{size-ns}width-1-10@{breakpoint} { width: percentage(1/10) @size-width-ratios-important; }
    .@{size-ns}width-3-10@{breakpoint} { width: percentage(3/10) @size-width-ratios-important; }
    .@{size-ns}width-7-10@{breakpoint} { width: percentage(7/10) @size-width-ratios-important; }
    .@{size-ns}width-9-10@{breakpoint} { width: percentage(9/10) @size-width-ratios-important; }
}
 
// Twelfths
.width-rulesets(@width-ratio) when (@width-ratio = 12) {    
    .@{size-ns}width-1-12@{breakpoint} { width: percentage(1/12) @size-width-ratios-important; }
    .@{size-ns}width-5-12@{breakpoint} { width: percentage(5/12) @size-width-ratios-important; }
    .@{size-ns}width-7-12@{breakpoint} { width: percentage(7/12) @size-width-ratios-important; }
    .@{size-ns}width-11-12@{breakpoint} { width: percentage(11/12) @size-width-ratios-important; }
}

.render-width-classes(@size-width-ratios; @breakpoint) when not (@size-width-ratios = false) {  
  
    // Loop through the available width ratios
  
    .loop-width-classes(@i: length(@size-width-ratios)) when (@i > 0) {

        .loop-width-classes(@i - 1);

        @width-ratio: extract(@size-width-ratios, @i);
      
        .width-rulesets(@width-ratio);
    }
  
    .loop-width-classes();
}

.mixin(width-rulesets) {

    // Auto
    .@{size-ns}width-auto@{breakpoint} { width: auto @size-width-ratios-important; }

    // Whole
    .@{size-ns}width-full@{breakpoint},
    .@{size-ns}width-1-1@{breakpoint} { width: 100% @size-width-ratios-important; }

    @size-width-ratios: "size-width-ratios-@{breakpoint-name}";

    .render-width-classes(@@size-width-ratios; @breakpoint);
}

& when not (@size-width-ratios-breakpoints = false) {

    [class^="@{size-ns}width-"],
    [class*=" @{size-ns}width-"] {
        width: 100% @size-width-ratios-important;
    }

    .render-responsive-rulesets(@size-width-ratios-breakpoints; width-rulesets);
}


// Intrinsic widths
//
// Objects: `size-*`
// ========================================================================

.mixin(intrinsic-width-rulesets) {

    // Make an element shrink wrap its content.

    .@{size-ns}size-fit-start@{breakpoint},
    .@{size-ns}size-fit-end@{breakpoint} {
        display: block;
        width: auto;
    }

    .@{size-ns}size-fit-start@{breakpoint} {
        float: @start;
    }

    .@{size-ns}size-fit-end@{breakpoint} {
        float: @end;
    }

    // Make an element fill the remaining space.
    // N.B. This will hide overflow.

    .@{size-ns}size-fill@{breakpoint} {
        display: block;
        overflow: hidden;
        width: auto;
    }

    // An alternative method to make an element fill the remaining space.
    // N.B. Do not use if child elements might be wider than the remaining space.
    // In Chrome, Safari, and Firefox it results in undesired layout.

    .@{size-ns}size-fill-alt@{breakpoint} {
        display: table-cell;
        max-width: 100%;
        width: 10000px;
    }

    // Make an element the width of its parent.

    .@{size-ns}size-full@{breakpoint} {
        box-sizing: border-box;
        display: block;
        width: 100%;
    }
}

& when not (@size-width-intrinsic-breakpoints = false) {
    .render-responsive-rulesets(@size-width-intrinsic-breakpoints; intrinsic-width-rulesets);
}


// Height
// =========================================================================

& when (@size-enable-height = true) {

    // More robust if padding and border are used

    [class^='@{size-ns}height-'],
    [class*=' @{size-ns}height-'] {
        box-sizing: border-box;
    }

    // Useful to extend the `html` and `body` element to the full height of the page.

    .@{size-ns}height-full,
    .@{size-ns}height-1-1 { height: 100%; }

    // Useful to create image teasers

    .@{size-ns}height-viewport {
        height: 100vh;
        min-height: @size-height-viewport-min-height;
    }
}


// Responsive objects
// ========================================================================

& when (@size-enable-responsive-objects = true) {

    // 1. Corrects `max-width` and `max-height` behavior if padding and border are used

    .@{size-ns}responsive-width,
    .@{size-ns}responsive-height {
        box-sizing: border-box;
    }

    // Responsiveness: Sets a maximum width relative to the parent and auto scales the height

    .@{size-ns}responsive-width {
        max-width: 100%;
        height: auto;
    }

    // Responsiveness: Sets a maximum height relative to the parent and auto scales the width
    // Only works if the parent element has a fixed height.

    .@{size-ns}responsive-height {
        max-height: 100%;
        width: auto;
    }
}


// Hooks
// ========================================================================

.hook-util-size;

.hook-util-size() {}