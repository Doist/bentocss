// Name:            Size
// Description:     Atomic size classes
//
// Namespace:       `width-*`
//                  `w-*` (see notes for .hook-util-size)
//                  `height-*`
//                  `responsive-*`
//
// Dependencies:    vars-base
//                  tool-responsive
//
// Based on:
//
// https://github.com/uikit/uikit/blob/v2.17.0/src/less/core/grid.less
// https://github.com/suitcss/utils-size/tree/0.7.2
//
// ========================================================================


// Variables
// ========================================================================

@size-ns:                                       @ns;

@size-important:                                !important;

// Ratios

@size-width-ratios-important:                   @size-important;

// breakpoint list
@size-width-ratios-breakpoints:                 false;

// unit list
@size-width-ratios-base:                        false;

@size-width-ratios-small:                       @size-width-ratios-base;
@size-width-ratios-medium:                      @size-width-ratios-base;
@size-width-ratios-large:                       @size-width-ratios-base;
@size-width-ratios-xlarge:                      @size-width-ratios-base;

// Intrinsic

// breakpoint list
@size-width-intrinsic-breakpoints:              false;

@size-height-breakpoints:                       false;
@size-height-viewport-min-height:               600/@px;

@size-responsive-objects-breakpoints:           false;


// ========================================================================
// Util: Size
// ========================================================================

// Proportional widths
// Any ratio is supported: 2, 3, 4, 5, 6, 8, 10, 12...
//
// Objects: `width-*`
// =========================================================================

// Widths

.width-rulesets(@width-ratio) {
  
    // Generate classes for current ratio    

    .loop-ratio-classes(@i: @width-ratio) when (@i > 0) {

        .loop-ratio-classes(@i - 1);
      
        .@{size-ns}width-@{i}-@{width-ratio}@{breakpoint} { width: percentage(@i/@width-ratio) @size-width-ratios-important; }
    }
  
    .loop-ratio-classes();
}

.render-width-classes(@size-width-ratios; @breakpoint) when not (@size-width-ratios = false) {  
  
    // Loop through the available width ratios
  
    .loop-width-classes(@i: length(@size-width-ratios)) when (@i > 0) {

        .loop-width-classes(@i - 1);

        @width-ratio: extract(@size-width-ratios, @i);
      
        .width-rulesets(@width-ratio);
    }
  
    .loop-width-classes();
}

.mixin(width-rulesets) {

    // Auto
    .@{size-ns}width-auto@{breakpoint} { width: auto @size-width-ratios-important; }

    // Full
    .@{size-ns}width-full@{breakpoint},
    .@{size-ns}width-1-1@{breakpoint} { width: 100% @size-width-ratios-important; }

    @size-width-ratios: "size-width-ratios-@{breakpoint-name}";

    .render-width-classes(@@size-width-ratios; @breakpoint);

    .hook-util-size-breakpoint(@breakpoint-name);
}

& when not (@size-width-ratios-breakpoints = false) {

    [class^="@{size-ns}width-"],
    [class*=" @{size-ns}width-"] {
        width: 100% @size-width-ratios-important;
    }

    .render-responsive-rulesets(@size-width-ratios-breakpoints; width-rulesets);
}


// Height
// =========================================================================

.mixin(size-height) {

    // More robust if padding and border are used

    [class^='@{size-ns}height-'],
    [class*=' @{size-ns}height-'] {
        box-sizing: border-box;
    }

    // Useful to extend the `html` and `body` element to the full height of the page.

    .@{size-ns}height-full@{breakpoint},
    .@{size-ns}height-1-1@{breakpoint} { height: 100%; }

    // Useful to create image teasers

    .@{size-ns}height-viewport@{breakpoint} {
        height: 100vh;
        min-height: @size-height-viewport-min-height;
    }
}

& when not (@size-height-breakpoints = false) {

    .render-responsive-rulesets(@size-height-breakpoints; size-height);
}


// Responsive objects
// ========================================================================

.mixin(size-responsive-objects) {

    // 1. Corrects `max-width` and `max-height` behavior if padding and border are used

    .@{size-ns}responsive-width@{breakpoint},
    .@{size-ns}responsive-height@{breakpoint} {
        box-sizing: border-box;
    }

    // Responsiveness: Sets a maximum width relative to the parent and auto scales the height

    .@{size-ns}responsive-width@{breakpoint} {
        max-width: 100%;
        height: auto;
    }

    // We can't overwrite CSS `height: auto` back with the HTML `height` attribute.
    // Specificity zero attributes https://www.w3.org/TR/css3-cascade/#preshint
    // https://stackoverflow.com/a/20176692

    .@{size-ns}responsive-width-reset@{breakpoint} {
        max-width: none;
    }    

    // Responsiveness: Sets a maximum height relative to the parent and auto scales the width
    // Only works if the parent element has a fixed height.

    .@{size-ns}responsive-height@{breakpoint} {
        max-height: 100%;
        width: auto;
    }

    // We can't overwrite CSS `width: auto` back with the HTML `width` attribute.
    // Specificity zero attributes https://www.w3.org/TR/css3-cascade/#preshint
    // https://stackoverflow.com/a/20176692

    .@{size-ns}responsive-height-reset@{breakpoint} {
        max-height: none;
    }    
}

& when not (@size-responsive-objects-breakpoints = false) {

    .render-responsive-rulesets(@size-responsive-objects-breakpoints; size-responsive-objects);
}


// Hooks
// ========================================================================

// Use the `w-*` namespace for any width that shouldn't fall back to 100% by default
// Useful for image elements that have a `width` set in HTML

& { .hook-util-size; }

.hook-util-size() {}
.hook-util-size-breakpoint(@breakpoint-name) {}