// Name:            Display
// Description:     Atomic display classes
//
// Namespace:       `display-*`
//                  `visible-*`
//                  `invisible`
//                  `hidden`
//                  `hidden-*`
//                  `sr-*`
//
// Dependencies:    vars-base
//                  tool-responsive
//
// Based on:
//
// https://github.com/uikit/uikit/blob/v2.17.0/src/less/core/utility.less
// https://github.com/twbs/bootstrap/blob/v3.3.2/less/utilities.less
// https://github.com/suitcss/utils-display/blob/0.4.2/lib/display.css
// https://github.com/h5bp/html5-boilerplate/blob/6.0.1/src/css/main.css
//
// ========================================================================


// Variables
// ========================================================================

@display-ns:                                    @ns;

@display-enable-visibility:                     false;

@display-mode-breakpoints:                      false;
@display-visibility-breakpoints:                false;
@display-screen-readers-breakpoints:            false;


// ========================================================================
// Util: Display
// ========================================================================

// Display

.mixin(display-mode) {

    .@{display-ns}display-block@{breakpoint} { display: block; }
    .@{display-ns}display-inline@{breakpoint} { display: inline; }

    // 1. Fix for Firefox bug: an image styled `max-width: 100%` within an
    // inline-block will display at its default size, and not limit its width to
    // 100% of an ancestral container.

    .@{display-ns}display-inline-block@{breakpoint} {
        display: inline-block;
        // 1
        max-width: 100%;
    }

    .@{display-ns}display-table@{breakpoint} { display: table; }
    .@{display-ns}display-table-cell@{breakpoint} { display: table-cell; }
    .@{display-ns}display-table-row@{breakpoint} { display: table-row; }       
}

& when not (@display-mode-breakpoints = false) {

    .render-responsive-rulesets(@display-mode-breakpoints; display-mode);
}

// Visibility
// Avoids setting display to `block` so it works also with `inline-block` and `table`

& when (@display-enable-visibility = true) {

    // Binary

    // It's hidden, but still affects layout
    .@{display-ns}invisible { visibility: hidden !important; }

    // Remove from the flow and screen readers on any device
    .@{display-ns}hidden {
        display: none !important;
        visibility: hidden !important;
    }

    // Range

    // Desktop and bigger
    @media @breakpoint-media-large-up {

        .@{display-ns}visible-\@sm { display: none !important; }
        .@{display-ns}visible-\@md { display: none !important; }
        .@{display-ns}hidden-\@lg { display: none !important; }
        .@{display-ns}visible-\@xs { display: none !important; }

    }

    // Tablet portrait
    @media @breakpoint-media-medium-range {

        .@{display-ns}visible-\@sm { display: none !important; }
        .@{display-ns}visible-\@lg { display: none !important ; }
        .@{display-ns}hidden-\@md { display: none !important; }
        .@{display-ns}visible-\@xs { display: none !important; }

    }

    // Phone landscape
    @media @breakpoint-media-small-range {

        .@{display-ns}visible-\@md { display: none !important; }
        .@{display-ns}visible-\@lg { display: none !important; }
        .@{display-ns}hidden-\@sm { display: none !important; }
        .@{display-ns}visible-\@xs { display: none !important; }

    }

    // Phone portrait and smaller
    @media @breakpoint-media-xsmall-down {

        .@{display-ns}visible-\@md { display: none !important; }
        .@{display-ns}visible-\@lg { display: none !important; }
        .@{display-ns}visible-\@sm { display: none !important; }
        .@{display-ns}hidden-\@xs { display: none !important; }

    }

    // Up and Down

    .mixin(visibility-rulesets) {

        .@{display-ns}hidden@{breakpoint} { display: none !important; }            
    }

    & when not (@display-visibility-breakpoints = false) {
        .render-responsive-rulesets(@display-visibility-breakpoints; visibility-rulesets);
    }
}

.mixin(display-screen-readers) {

    // Completely remove from the flow, but have it available for screen readers
    // https://snook.ca/archives/html_and_css/hiding-content-for-accessibility
    // http://a11yproject.com/posts/how-to-hide-content/

    // 1. For long content, line feeds are not interpreted as spaces and small width
    // causes content to wrap 1 word per line:
    // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe

    .@{display-ns}sr-only@{breakpoint},
    .@{display-ns}sr-only-focusable@{breakpoint} {
        border: 0;
        clip: rect(0 0 0 0);
        clip-path: inset(50%);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;
        // 1
        white-space: nowrap;
    }

    // Use in conjunction with .sr-only to allow the element to be focusable
    // when navigated to via the keyboard
    // Useful for "Skip to main content" links; see http://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1

    .@{display-ns}sr-only-focusable@{breakpoint} {
        &:active,
        &:focus {
            clip: auto;
            clip-path: none;
            height: auto;
            margin: 0;
            overflow: visible;
            position: static;
            width: auto;
            white-space: inherit;
        }
    }       
}

& when not (@display-screen-readers-breakpoints = false) {

    .render-responsive-rulesets(@display-screen-readers-breakpoints; display-screen-readers);
}


// Hooks
// ========================================================================

& { .hook-util-display; }

.hook-util-display() {}