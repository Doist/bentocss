// Name:            Space
// Description:     Atomic space classes
//
// Namespace:       `m-*`
//                  `p-*`
//
// Dependencies:    vars-base
//                  tool-responsive
//
// Naming conventions:
//
// .(m|p)-(a|v|h|t|e|r|b|s|l)(n) = margin/padding all/vertical/horizontal/top/end/right/bottom/start/left negative
//
// Based on:
//
// https://github.com/jxnblk/basscss/blob/v5.2.1/scss/_utility-white-space.scss
// https://github.com/jxnblk/basscss/blob/v5.2.1/scss/_responsive-white-space.scss
// https://github.com/inuitcss/trumps.spacing-responsive/blob/0.0.7/_trumps.spacing-responsive.scss
// http://us5.campaign-archive2.com/?u=7e093c5cf4&id=564702bd96
//
// ========================================================================


// Variables
// ========================================================================

@space-ns:                                      @ns;

@space-important:                               !important;

// Space

@space-units-important:                         @space-important;
@space-children-important:                      @space-important;

// breakpoint list
@space-units-breakpoints:                       false;

// unit list
@space-units-base:                              false;

@space-units-base-margin:                       @space-units-base;
@space-units-base-margin-negative:              @space-units-base;
@space-units-base-padding:                      @space-units-base;

@space-units-base-small:                        @space-units-base;

@space-units-small-margin:                      @space-units-base-small;
@space-units-small-margin-negative:             @space-units-base-small;
@space-units-small-padding:                     @space-units-base-small;

@space-units-base-medium:                       @space-units-base;

@space-units-medium-margin:                     @space-units-base-medium;
@space-units-medium-margin-negative:            @space-units-base-medium;
@space-units-medium-padding:                    @space-units-base-medium;

@space-units-base-large:                        @space-units-base;

@space-units-large-margin:                      @space-units-base-large;
@space-units-large-margin-negative:             @space-units-base-large;
@space-units-large-padding:                     @space-units-base-large;

@space-units-base-xlarge:                       @space-units-base;

@space-units-xlarge-margin:                     @space-units-base-xlarge;
@space-units-xlarge-margin-negative:            @space-units-base-xlarge;
@space-units-xlarge-padding:                    @space-units-base-xlarge;

// breakpoint list
@space-children-breakpoints:                    false;

// breakpoint list
@space-gap-breakpoints:                         false;

// unit list
@space-gap-units-base:                          false;
@space-gap-units-small:                         @space-gap-units-base;
@space-gap-units-medium:                        @space-gap-units-base;
@space-gap-units-large:                         @space-gap-units-base;
@space-gap-units-xlarge:                        @space-gap-units-base;


// ========================================================================
// Util: Space
// ========================================================================

// Space

.space-rulesets(@space-type) when (@space-type = margin) {               
    .@{space-ns}m-a-@{space-unit}@{breakpoint} { margin:          @@space-value @space-units-important; }
    .@{space-ns}m-v-@{space-unit}@{breakpoint} { margin-top:      @@space-value @space-units-important; margin-bottom:   @@space-value @space-units-important; }
    .@{space-ns}m-h-@{space-unit}@{breakpoint} { margin-@{end}:   @@space-value @space-units-important; margin-@{start}: @@space-value @space-units-important; }
    .@{space-ns}m-t-@{space-unit}@{breakpoint} { margin-top:      @@space-value @space-units-important; }
    .@{space-ns}m-e-@{space-unit}@{breakpoint} { margin-@{end}:   @@space-value @space-units-important; }
    .@{space-ns}m-b-@{space-unit}@{breakpoint} { margin-bottom:   @@space-value @space-units-important; }
    .@{space-ns}m-s-@{space-unit}@{breakpoint} { margin-@{start}: @@space-value @space-units-important; }
}

.space-rulesets(@space-type) when (@space-type = margin-negative) and not (@space-unit = 0) {
    .@{space-ns}m-an-@{space-unit}@{breakpoint} { margin:          -@@space-value @space-units-important; }
    .@{space-ns}m-vn-@{space-unit}@{breakpoint} { margin-top:      -@@space-value @space-units-important; margin-bottom:   -@@space-value @space-units-important; }
    .@{space-ns}m-hn-@{space-unit}@{breakpoint} { margin-@{end}:   -@@space-value @space-units-important; margin-@{start}: -@@space-value @space-units-important; }
    .@{space-ns}m-tn-@{space-unit}@{breakpoint} { margin-top:      -@@space-value @space-units-important; }
    .@{space-ns}m-en-@{space-unit}@{breakpoint} { margin-@{end}:   -@@space-value @space-units-important; }
    .@{space-ns}m-bn-@{space-unit}@{breakpoint} { margin-bottom:   -@@space-value @space-units-important; }
    .@{space-ns}m-sn-@{space-unit}@{breakpoint} { margin-@{start}: -@@space-value @space-units-important; } 
}

.space-rulesets(@space-type) when (@space-type = padding) {
    .@{space-ns}p-a-@{space-unit}@{breakpoint} { padding:          @@space-value @space-units-important; }
    .@{space-ns}p-v-@{space-unit}@{breakpoint} { padding-top:      @@space-value @space-units-important; padding-bottom:   @@space-value @space-units-important; }
    .@{space-ns}p-h-@{space-unit}@{breakpoint} { padding-@{end}:   @@space-value @space-units-important; padding-@{start}: @@space-value @space-units-important; }
    .@{space-ns}p-t-@{space-unit}@{breakpoint} { padding-top:      @@space-value @space-units-important; }
    .@{space-ns}p-e-@{space-unit}@{breakpoint} { padding-@{end}:   @@space-value @space-units-important; }
    .@{space-ns}p-r-@{space-unit}@{breakpoint} { padding-right:    @@space-value @space-units-important; }    
    .@{space-ns}p-b-@{space-unit}@{breakpoint} { padding-bottom:   @@space-value @space-units-important; }
    .@{space-ns}p-s-@{space-unit}@{breakpoint} { padding-@{start}: @@space-value @space-units-important; }
    .@{space-ns}p-l-@{space-unit}@{breakpoint} { padding-left:     @@space-value @space-units-important; }    
} 

.render-space-classes(@space-type; @space-units; @breakpoint) when not (@space-units = false) {  
  
    // Loop through the available spacing units
  
    .loop-space-classes(@i: length(@space-units)) when (@i > 0) {

        .loop-space-classes(@i - 1);

        @space-unit: extract(@space-units, @i);
        @space-value: "base-space-@{space-unit}";
      
        .space-rulesets(@space-type);
    }
  
    .loop-space-classes();
}

.mixin(space-rulesets) {

    .@{space-ns}m-a-auto@{breakpoint} { margin:          auto @space-units-important; }
    .@{space-ns}m-v-auto@{breakpoint} { margin-top:      auto @space-units-important; margin-bottom: auto @space-units-important; }
    .@{space-ns}m-h-auto@{breakpoint} { margin-left:     auto @space-units-important; margin-right:  auto @space-units-important; }
    .@{space-ns}m-t-auto@{breakpoint} { margin-top:      auto @space-units-important; }
    .@{space-ns}m-e-auto@{breakpoint} { margin-@{end}:   auto @space-units-important; }
    .@{space-ns}m-b-auto@{breakpoint} { margin-bottom:   auto @space-units-important; }
    .@{space-ns}m-s-auto@{breakpoint} { margin-@{start}: auto @space-units-important; }

    @space-units-margin: "space-units-@{breakpoint-name}-margin";
    @space-units-margin-negative: "space-units-@{breakpoint-name}-margin-negative";
    @space-units-padding: "space-units-@{breakpoint-name}-padding";

    .render-space-classes(margin; @@space-units-margin; @breakpoint);
    .render-space-classes(margin-negative; @@space-units-margin-negative; @breakpoint);
    .render-space-classes(padding; @@space-units-padding; @breakpoint);

    .hook-util-space-breakpoint(@breakpoint-name);
}

& when not (@space-units-breakpoints = false) {

    .render-responsive-rulesets(@space-units-breakpoints; space-rulesets);
}


// Children
// ========================================================================

.mixin(space-children) {

    .@{space-ns}m-child-ab-0@{breakpoint} > * { margin-bottom: 0 @space-children-important; }
    .@{space-ns}m-child-ft-0@{breakpoint} > :first-child { margin-top: 0 @space-children-important; }
    .@{space-ns}m-child-lb-0@{breakpoint} > :last-child { margin-bottom: 0 @space-children-important; }
}

& when not (@space-children-breakpoints = false) {

    .render-responsive-rulesets(@space-children-breakpoints; space-children);
}


// Gap
// Only recommended for fixed, full, or auto width elements, as percentage
// based widths will be based on total_available_width + gap_width.
//
// Note: Use a standalone .overflow-hidden element to prevent negative margins
// from collapsing between adjacent siblings.
// ========================================================================

.space-gap-rulesets() {

    .@{space-ns}m-gap-@{space-unit}@{breakpoint} {
        margin-bottom: -@@space-value;
        
        &:not(.@{space-ns}m-gap-no-offset@{breakpoint}) {
            @{start}: -@@space-value;
        }
    }

    .@{space-ns}m-gap-@{space-unit}@{breakpoint} > * {
        margin-bottom: @@space-value;
        margin-@{start}: @@space-value;
    }
}
 
.render-space-gap-classes(@space-units; @breakpoint) when not (@space-units = false) {
  
    // Loop through the available spacing units
  
    .loop-space-gap-classes(@i: length(@space-units)) when (@i > 0) {

        .loop-space-gap-classes(@i - 1);

        @space-unit: extract(@space-units, @i);
        @space-value: "base-space-@{space-unit}";
      
        .space-gap-rulesets();
    }
  
    .loop-space-gap-classes();
}

.mixin(space-gap-rulesets) {

    @space-gap-units: "space-gap-units-@{breakpoint-name}";

    .render-space-gap-classes(@@space-gap-units; @breakpoint);
}

& when not (@space-gap-breakpoints = false) {

    [class^='@{space-ns}m-gap-'],
    [class*=' @{space-ns}m-gap-'] {
        position: relative;
    }

    .render-responsive-rulesets(@space-gap-breakpoints; space-gap-rulesets);
}


// Hooks
// ========================================================================

& { .hook-util-space; }

.hook-util-space() {}
.hook-util-space-breakpoint(@breakpoint-name) {}