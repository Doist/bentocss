// Name:            Space
// Description:     Collection of spacing utility classes
//
// Namespace:       `m-*`
//                  `p-*`
//                  `whitespace-*`
//
// Dependencies:    vars-base
//                  tool-responsive
//
// Naming conventions:
//
// .(m|p)-(a|v|h|t|e|b|s)(n) = margin/padding all/vertical/horizontal/top/end/bottom/start negative
//
// Based on:
//
// https://github.com/jxnblk/basscss/blob/v5.2.1/scss/_utility-white-space.scss
// https://github.com/jxnblk/basscss/blob/v5.2.1/scss/_responsive-white-space.scss
// https://github.com/inuitcss/trumps.spacing-responsive/blob/0.0.7/_trumps.spacing-responsive.scss
// http://us5.campaign-archive2.com/?u=7e093c5cf4&id=564702bd96
//
// ========================================================================


// Variables
// ========================================================================

@space-ns:                                      @ns;

@space-important:                               !important;

@space-enable-children:                         false;
@space-enable-gutter:                           false;
@space-enable-white-space:                      false;

// Space

@space-units-important:                         @space-important;
@space-children-important:                      @space-important;

// breakpoint list
@space-units-breakpoints:                       false;

// unit list
@space-units-base:                              false;

@space-units-base-margin:                       @space-units-base;
@space-units-base-margin-negative:              @space-units-base;
@space-units-base-padding:                      @space-units-base;

@space-units-base-small:                        @space-units-base;

@space-units-small-margin:                      @space-units-base-small;
@space-units-small-margin-negative:             @space-units-base-small;
@space-units-small-padding:                     @space-units-base-small;

@space-units-base-medium:                       @space-units-base;

@space-units-medium-margin:                     @space-units-base-medium;
@space-units-medium-margin-negative:            @space-units-base-medium;
@space-units-medium-padding:                    @space-units-base-medium;

@space-units-base-large:                        @space-units-base;

@space-units-large-margin:                      @space-units-base-large;
@space-units-large-margin-negative:             @space-units-base-large;
@space-units-large-padding:                     @space-units-base-large;

@space-units-base-xlarge:                       @space-units-base;

@space-units-xlarge-margin:                     @space-units-base-xlarge;
@space-units-xlarge-margin-negative:            @space-units-base-xlarge;
@space-units-xlarge-padding:                    @space-units-base-xlarge;

// unit list
@space-units-base-gutter:                       1;


// ========================================================================
// Util: Space
// ========================================================================

// Space

.space-rulesets(@space-type) when (@space-type = margin) {               
    .@{space-ns}m-a-@{space-unit}@{breakpoint} { margin:          @@space-value @space-units-important; }
    .@{space-ns}m-v-@{space-unit}@{breakpoint} { margin-top:      @@space-value @space-units-important; margin-bottom:   @@space-value @space-units-important; }
    .@{space-ns}m-h-@{space-unit}@{breakpoint} { margin-@{end}:   @@space-value @space-units-important; margin-@{start}: @@space-value @space-units-important; }
    .@{space-ns}m-t-@{space-unit}@{breakpoint} { margin-top:      @@space-value @space-units-important; }
    .@{space-ns}m-e-@{space-unit}@{breakpoint} { margin-@{end}:   @@space-value @space-units-important; }
    .@{space-ns}m-b-@{space-unit}@{breakpoint} { margin-bottom:   @@space-value @space-units-important; }
    .@{space-ns}m-s-@{space-unit}@{breakpoint} { margin-@{start}: @@space-value @space-units-important; }
}

.space-rulesets(@space-type) when (@space-type = margin-negative) and (@space-unit > 0) {
    .@{space-ns}m-an-@{space-unit}@{breakpoint} { margin:          -@@space-value @space-units-important; }
    .@{space-ns}m-vn-@{space-unit}@{breakpoint} { margin-top:      -@@space-value @space-units-important; margin-bottom:   -@@space-value @space-units-important; }
    .@{space-ns}m-hn-@{space-unit}@{breakpoint} { margin-@{end}:   -@@space-value @space-units-important; margin-@{start}: -@@space-value @space-units-important; }
    .@{space-ns}m-tn-@{space-unit}@{breakpoint} { margin-top:      -@@space-value @space-units-important; }
    .@{space-ns}m-en-@{space-unit}@{breakpoint} { margin-@{end}:   -@@space-value @space-units-important; }
    .@{space-ns}m-bn-@{space-unit}@{breakpoint} { margin-bottom:   -@@space-value @space-units-important; }
    .@{space-ns}m-sn-@{space-unit}@{breakpoint} { margin-@{start}: -@@space-value @space-units-important; } 
}

.space-rulesets(@space-type) when (@space-type = padding) {
    .@{space-ns}p-a-@{space-unit}@{breakpoint} { padding:          @@space-value @space-units-important; }
    .@{space-ns}p-v-@{space-unit}@{breakpoint} { padding-top:      @@space-value @space-units-important; padding-bottom:   @@space-value @space-units-important; }
    .@{space-ns}p-h-@{space-unit}@{breakpoint} { padding-@{end}:   @@space-value @space-units-important; padding-@{start}: @@space-value @space-units-important; }
    .@{space-ns}p-t-@{space-unit}@{breakpoint} { padding-top:      @@space-value @space-units-important; }
    .@{space-ns}p-e-@{space-unit}@{breakpoint} { padding-@{end}:   @@space-value @space-units-important; }
    .@{space-ns}p-b-@{space-unit}@{breakpoint} { padding-bottom:   @@space-value @space-units-important; }
    .@{space-ns}p-s-@{space-unit}@{breakpoint} { padding-@{start}: @@space-value @space-units-important; }
} 

.render-space-classes(@space-type; @space-units; @breakpoint) when not (@space-units = false) {  
  
    // Loop through the available spacing units
  
    .loop-space-classes(@i: length(@space-units)) when (@i > 0) {

        .loop-space-classes(@i - 1);

        @space-unit: extract(@space-units, @i);
        @space-value: "base-space-@{space-unit}";
      
        .space-rulesets(@space-type);
    }
  
    .loop-space-classes();
}

.mixin(space-rulesets) {

    .@{space-ns}m-h-auto@{breakpoint} { margin-left: auto @space-units-important; margin-right: auto @space-units-important; }

    @space-units-margin: "space-units-@{breakpoint-name}-margin";
    @space-units-margin-negative: "space-units-@{breakpoint-name}-margin-negative";
    @space-units-padding: "space-units-@{breakpoint-name}-padding";

    .render-space-classes(margin; @@space-units-margin; @breakpoint);
    .render-space-classes(margin-negative; @@space-units-margin-negative; @breakpoint);
    .render-space-classes(padding; @@space-units-padding; @breakpoint);
}

& when not (@space-units-breakpoints = false) {

    .render-responsive-rulesets(@space-units-breakpoints; space-rulesets);
}


// Children
// ========================================================================

& when (@space-enable-children = true) {

    .@{space-ns}m-child-ft-0 > :first-child { margin-top: 0 @space-children-important; }
    .@{space-ns}m-child-lb-0 > :last-child { margin-bottom: 0 @space-children-important; }
}


// Gutter
// Only recommended for fixed, full, or auto width elements, as percentage
// based widths will be based on total_available_width + gutter_width.
// ========================================================================

& when (@space-enable-gutter = true) {

    .space-gutter-rulesets() {   

        .@{space-ns}m-gutter-@{space-unit} {
            margin-bottom: -@@space-value;
            @{start}: -@@space-value;
        }

        .@{space-ns}m-gutter-@{space-unit} > * {
            margin-bottom: @@space-value;
            margin-@{start}: @@space-value;
        }
    }

    .render-space-gutter-classes(@space-units) when not (@space-units = false) {
      
        // Loop through the available spacing units
      
        .loop-space-gutter-classes(@i: length(@space-units)) when (@i > 0) {

            .loop-space-gutter-classes(@i - 1);

            @space-unit: extract(@space-units, @i);
            @space-value: "base-space-@{space-unit}";
          
            .space-gutter-rulesets();
        }
      
        .loop-space-gutter-classes();
    }

    [class^='@{space-ns}m-gutter-'],
    [class*=' @{space-ns}m-gutter-'] {
        position: relative;
    }

    // Stop negative margin bottom from collapsing
    [class^='@{space-ns}m-gutter-']:after,
    [class*=' @{space-ns}m-gutter-']:after {
        content: '';
        display: table;
    }

    & {
        .render-space-gutter-classes(@space-units-base-gutter);
    }
}


// White space
// ========================================================================

& when (@space-enable-white-space = true) {

    // 1. Remove whitespace between child elements when using `inline-block`
    //    or `inline-table`.

    .@{space-ns}whitespace-0 {
        // 1
        font-size: 0.001px;
    }

    // 1. Child elements must set their base font size, or use the provided
    // `.m-no-whitespace__item` font size reset.

    .@{space-ns}whitespace-0__item {
        // 1
        font-size: 1rem;
    }
}


// Hooks
// ========================================================================

.hook-util-space;

.hook-util-space() {}