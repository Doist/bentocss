// Name:            Grid
// Description:     Provides a responsive, fluid and nestable grid
//
// Namespace:       `grid`
//                  `grid-divider`
//                  `container`
//
// Sub-objects:     `grid__cell`
//
// Modifiers:       `grid--gutter-0`
//                  `grid--gutter-sm`
//                  `grid--gutter-md`
//                  `grid--divider`
//                  `grid--match`
//
// Dependencies:    vars-base
//                  tool-responsive
//
// Uses:            Layout: `width-*`
//                  Flex: `flex--*` for alignment
//
// Markup:
//
// <!-- grid -->
// <div class="grid">
//     <div class="grid__cell width-1-2"></div>
//     <div class="grid__cell width-1-2"></div>
// </div>
//
// <!-- grid--divider -->
// <div class="grid grid--divider">
//     <div class="grid__cell width-1-2"></div>
//     <div class="grid__cell width-1-2"></div>
// </div>
// <hr class="grid-divider">
// <div class="grid grid--divider">
//     <div class="grid__cell width-1-2"></div>
//     <div class="grid__cell width-1-2"></div>
// </div>
//
// Based on:
//
// https://github.com/uikit/uikit/blob/v2.17.0/src/less/core/grid.less
// https://github.com/suitcss/components-grid/blob/2.0.2/lib/grid.css
// https://github.com/zurb/foundation/blob/v5.5.1/scss/foundation/components/_block-grid.scss
//
// Notes:
//
// Makes use of child combinator `>` to allow for component nesting.
//
// Parent modifiers (indirect) such as `.grid--gutter-0 > .grid__cell`
// could be replaced by less convenient per-child modifiers (direct)
// `.grid__cell--collapse`.
//
// ========================================================================


// Variables
// ========================================================================

@grid-ns:                                       @ns;

@grid-enable-modifier-divider:                  false;
@grid-enable-modifier-match:                    false;
@grid-enable-container:                         false;

@grid-gutter-horizontal:                        @base-gutter;
@grid-gutter-vertical:                          @base-gutter;

@grid-gutter-modifiers-breakpoints:             false;

@grid-gutter-large-horizontal:                  @base-gutter-large;
@grid-gutter-large-vertical:                    @base-gutter-large;

@grid-gutter-small-horizontal:                  @base-gutter-small;
@grid-gutter-small-vertical:                    @base-gutter-small;

@grid-divider-breakpoint:                       @breakpoint-xlarge;

@grid-divider-border:                           @base-color-border;
@grid-divider-border-width:                     @base-border-width;

@grid-container-breakpoint:                     @breakpoint-xlarge;

@grid-container-max-width:                      980/@px;
@grid-container-padding-horizontal:             @base-gutter;

@grid-container-large-max-width:                1200/@px;
@grid-container-large-padding-horizontal:       @base-gutter-large;


// ========================================================================
// Component: Grid
// ========================================================================

// 1. Makes grid more robust so that it can be used with other block elements like lists

.@{grid-ns}grid {
    display: flex;
    flex-wrap: wrap;
    // 1
    margin: 0;
    padding: 0;
    list-style: none;
}

// Micro clearfix to make grids more robust
// Can't use `table` because it creates a 1px gap when it becomes a flex item, only in Webkit

.@{grid-ns}grid::before,
.@{grid-ns}grid::after {
    content: "";
    display: block;
    overflow: hidden;
}

.@{grid-ns}grid::after { clear: both; }

// Grid cell
// 1. Makes grid more robust so that it can be used with other block elements
// 2. Space is allocated solely based on content dimensions

.@{grid-ns}grid__cell {
    box-sizing: border-box;
    // 1
    margin: 0;
    padding: 0;
}

.@{grid-ns}grid > .@{grid-ns}grid__cell {
    // 2
    flex: none;
}

// Remove margin from the last-child
 
.@{grid-ns}grid__cell > :last-child { margin-bottom: 0; }


// Grid gutter
// ========================================================================

// Default gutter

// Horizontal
.@{grid-ns}grid { margin-@{start}: -@grid-gutter-horizontal; }

.@{grid-ns}grid > .@{grid-ns}grid__cell { padding-@{start}: @grid-gutter-horizontal; }

// Vertical
.@{grid-ns}grid > .@{grid-ns}grid__cell { margin-bottom: @grid-gutter-vertical; }

.@{grid-ns}grid.@{grid-ns}grid--m-b-0 { margin-bottom: -@grid-gutter-vertical; }    

// Collapse gutter

// Horizontal
.@{grid-ns}grid--gutter-0 { margin-@{start}: 0; }
.@{grid-ns}grid--gutter-0 > .@{grid-ns}grid__cell { padding-@{start}: 0; }

// Vertical
.@{grid-ns}grid--gutter-0 > .@{grid-ns}grid__cell { margin-bottom: 0; }


// Gutter modifiers

.mixin(grid-gutter-modifiers) {    

    // Small gutter

    // Horizontal
    .@{grid-ns}grid--gutter-sm@{breakpoint} { margin-@{start}: -@grid-gutter-small-horizontal; }
    .@{grid-ns}grid--gutter-sm@{breakpoint} > .@{grid-ns}grid__cell { padding-@{start}: @grid-gutter-small-horizontal; }

    // Vertical
    .@{grid-ns}grid--gutter-sm@{breakpoint} > .@{grid-ns}grid__cell { margin-bottom: @grid-gutter-small-vertical; }                
    .@{grid-ns}grid--gutter-sm@{breakpoint}.@{grid-ns}grid--m-b-0 { margin-bottom: -@grid-gutter-small-vertical; }

    // Medium gutter

    // Horizontal
    .@{grid-ns}grid--gutter-md@{breakpoint} { margin-@{start}: -@grid-gutter-horizontal; }
    .@{grid-ns}grid--gutter-md@{breakpoint} > .@{grid-ns}grid__cell { padding-@{start}: @grid-gutter-horizontal; }

    // Vertical
    .@{grid-ns}grid--gutter-md@{breakpoint} > .@{grid-ns}grid__cell { margin-bottom: @grid-gutter-vertical; }
    .@{grid-ns}grid--gutter-md@{breakpoint}.@{grid-ns}grid--m-b-0 { margin-bottom: -@grid-gutter-vertical; }          
}

& when not (@grid-gutter-modifiers-breakpoints = false) {

    .render-responsive-rulesets(@grid-gutter-modifiers-breakpoints; grid-gutter-modifiers);
}


// Modifier: `grid--divider`
// ========================================================================

& when (@grid-enable-modifier-divider = true) {

    // Cell divider
    // Only works with the default gutter. Does not work with gutter collapse, small or large.
    // Does not work with `push-*`, `pull-*` and not if the columns float into the next row.

    .@{grid-ns}grid--divider {
        margin-@{start}: -@grid-gutter-horizontal;
        margin-@{end}: -@grid-gutter-horizontal;
    }

    .@{grid-ns}grid--divider > .@{grid-ns}grid__cell {
        padding-@{start}: @grid-gutter-horizontal;
        padding-@{end}: @grid-gutter-horizontal;
    }

    .@{grid-ns}grid--divider > .@{grid-ns}grid__cell:not(:first-child) { border-@{start}: @grid-divider-border-width solid @grid-divider-border; }

    // Large screen and bigger
    @media (min-width: @grid-divider-breakpoint) {

        // Large gutter    

        .@{grid-ns}grid--divider {
            margin-@{start}: -@grid-gutter-large-horizontal;
            margin-@{end}: -@grid-gutter-large-horizontal;
        }

        .@{grid-ns}grid--divider > .@{grid-ns}grid__cell {
            padding-@{start}: @grid-gutter-large-horizontal;
            padding-@{end}: @grid-gutter-large-horizontal;
        }

    }

    // Row divider

    .@{grid-ns}grid-divider {
        margin-top: @grid-gutter-vertical;
        margin-bottom: @grid-gutter-vertical;
        border-top: @grid-divider-border-width solid @grid-divider-border;
    }

    // Large screen and bigger
    @media (min-width: @grid-divider-breakpoint) {

        .@{grid-ns}grid-divider {
            margin-top: @grid-gutter-large-vertical;
            margin-bottom: @grid-gutter-large-vertical;
        }

    }
}


// Match cell inner containers
// ========================================================================

& when (@grid-enable-modifier-match = true) {

    .@{grid-ns}grid--match > .@{grid-ns}grid__cell {
        display: flex;
    }

    // 1. Behave like a block element

    .@{grid-ns}grid--match > .@{grid-ns}grid__cell > * {
        flex: none;
        // 1
        box-sizing: border-box;
        width: 100%;
    }
}


// Alignment modifiers
// ========================================================================

// Use Flex horizontal alignment utilities


// Object: `container`
// ========================================================================

& when (@grid-enable-container = true) {

    .@{grid-ns}container {
        box-sizing: border-box;
        margin-left: auto;
        margin-right: auto;
        max-width: @grid-container-max-width;
        padding: 0 @grid-container-padding-horizontal;
    }

    // Large screen and bigger
    @media (min-width: @grid-container-breakpoint) {

        .@{grid-ns}container {
            max-width: @grid-container-large-max-width;
            padding: 0 @grid-container-large-padding-horizontal;
        }

    }

    // Micro clearfix to make container more robust

    .@{grid-ns}container::before,
    .@{grid-ns}container::after {
        content: "";
        display: table;
    }

    .@{grid-ns}container::after { clear: both; }
}

// Hooks
// ========================================================================

.hook-grid-misc;

.hook-grid-misc() {}