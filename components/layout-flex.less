// Name:            Flex
// Description:     Defines styles to create layouts with flexbox
//
// Namespace:       `flex`
//                  `flex-inline`
//
// Sub-objects:     `flex__item` (optional, implied)
//
// Modifiers:       `flex--stretch`
//                  `flex--top`
//                  `flex--middle`
//                  `flex--baseline`
//                  `flex--bottom`
//                  `flex--center`
//                  `flex--end`
//                  `flex--space-between`
//                  `flex--space-around`
//                  `flex--start`
//                  `flex--row`
//                  `flex--row-reverse`
//                  `flex--column`
//                  `flex--column-reverse`
//                  `flex--wrap`
//                  `flex--wrap-reverse`
//                  `flex--wrap-none`
//                  `flex--wrap-stretch`
//                  `flex--wrap-start`
//                  `flex--wrap-middle`
//                  `flex--wrap-bottom`
//                  `flex--wrap-space-between`
//                  `flex--wrap-space-around`
//                  `flex--equal`
//
// Sub-modifiers:   `flex__item--start`
//                  `flex__item--end`
//                  `flex__item--center`
//                  `flex__item--stretch`
//                  `flex__item--baseline`
//                  `flex__item--auto`
//                  `flex__item--first`
//                  `flex__item--last`
//                  `flex__item--order-default`
//                  `flex__item--none`
//                  `flex__item--auto`
//                  `flex__item--1`
//
// Dependencies:    vars-base
//
// Based on:
//
// https://github.com/uikit/uikit/blob/v2.17.0/src/less/core/flex.less
// https://github.com/jxnblk/basscss/blob/v5.2.1/scss/_flex-object.scss
// https://github.com/suitcss/utils-flex/blob/1.0.0/lib/flex.css
//
// Notes:
//
// Browser support for the flexible box layout module is limited.
// http://caniuse.com/#feat=flexbox
//
// Quick guide
// http://jonibologna.com/flexbox-cheatsheet/
// https://css-tricks.com/snippets/css/a-guide-to-flexbox/
// https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties
//
// Updated with latest vendor prefix data from caniuse.com as of 10-04-2015
//
// ========================================================================


// Variables
// ========================================================================

@flex-ns:                                       @ns;

@flex-container-breakpoints:                    base;
@flex-alignment-breakpoints:                    false;
@flex-alignment-vertical-breakpoints:           @flex-alignment-breakpoints;
@flex-alignment-horizontal-breakpoints:         @flex-alignment-breakpoints;
@flex-direction-breakpoints:                    false;
@flex-wrap-breakpoints:                         false;
@flex-item-alignment-breakpoints:               false;
@flex-item-order-breakpoints:                   false;
@flex-item-dimension-breakpoints:               false;
@flex-equal-breakpoints:                        false;


// ========================================================================
// Component: Flex
// ========================================================================

.mixin(flex-container) {    

    // Container

    .@{flex-ns}flex@{breakpoint} { display: flex; }
    .@{flex-ns}flex-inline@{breakpoint} { display: inline-flex; }

    // Fixes initial flex-shrink value in IE10

    .@{flex-ns}flex@{breakpoint} > *,
    .@{flex-ns}flex-inline@{breakpoint} > * { -ms-flex-negative: 1; }
}

& when not (@flex-container-breakpoints = false) {

    .render-responsive-rulesets(@flex-container-breakpoints; flex-container);
}


// Alignment modifiers
// ========================================================================

// Vertical alignment
//
// Align items in the cross axis of the current line of the flex container

.mixin(flex-alignment-vertical) {

    //  Default value is `stretch`
    .@{flex-ns}flex--stretch@{breakpoint} { align-items: stretch; }
    .@{flex-ns}flex--top@{breakpoint} { align-items: flex-start; }
    .@{flex-ns}flex--middle@{breakpoint} { align-items: center; }
    .@{flex-ns}flex--baseline@{breakpoint} { align-items: baseline; }
    .@{flex-ns}flex--bottom@{breakpoint} { align-items: flex-end; }    
}

& when not (@flex-alignment-vertical-breakpoints = false) {

    .render-responsive-rulesets(@flex-alignment-vertical-breakpoints; flex-alignment-vertical);
}

// Horizontal alignment
//
// Align items along the main axis of the current line of the flex container

.mixin(flex-alignment-horizontal) {

    //  Default value is `flex-start`

    // Left for LTR.
    .@{flex-ns}flex--start@{breakpoint} { justify-content: flex-start; }
    .@{flex-ns}flex--center@{breakpoint} { justify-content: center; }

    // Right for LTR.
    .@{flex-ns}flex--end@{breakpoint} { justify-content: flex-end; }
    .@{flex-ns}flex--space-between@{breakpoint} { justify-content: space-between; }
    .@{flex-ns}flex--space-around@{breakpoint} { justify-content: space-around;}
}

& when not (@flex-alignment-horizontal-breakpoints = false) {

    .render-responsive-rulesets(@flex-alignment-horizontal-breakpoints; flex-alignment-horizontal);
}


// Direction modifiers
// ========================================================================

.mixin(flex-direction) {

    //  Default value is `row`
    .@{flex-ns}flex--row@{breakpoint} { flex-direction: row; }
    .@{flex-ns}flex--row-reverse@{breakpoint} { flex-direction: row-reverse; }
    .@{flex-ns}flex--column@{breakpoint} { flex-direction: column; }
    .@{flex-ns}flex--column-reverse@{breakpoint} { flex-direction: column-reverse; }    
}

& when not (@flex-direction-breakpoints = false) {

    .render-responsive-rulesets(@flex-direction-breakpoints; flex-direction);
}


// Wrap modifiers
// ========================================================================

.mixin(flex-wrap) {

    //  Default value is `nowrap`
    .@{flex-ns}flex--wrap-none@{breakpoint} { flex-wrap: nowrap; }
    .@{flex-ns}flex--wrap@{breakpoint} { flex-wrap: wrap; }
    .@{flex-ns}flex--wrap-reverse@{breakpoint} { flex-wrap: wrap-reverse; }

    // Horizontal wrapping
    //
    // Aligns items within the flex container when there is extra space in the cross-axis
    // Has no effect when there is only one line of flex items

    //  Default value is `stretch`
    .@{flex-ns}flex--wrap-stretch@{breakpoint} { align-content: stretch; }
    .@{flex-ns}flex--wrap-start@{breakpoint} { align-content: flex-start; }
    .@{flex-ns}flex--wrap-middle@{breakpoint} { align-content: center; }
    .@{flex-ns}flex--wrap-end@{breakpoint} { align-content: flex-end; }
    .@{flex-ns}flex--wrap-space-between@{breakpoint} { align-content: space-between; }
    .@{flex-ns}flex--wrap-space-around@{breakpoint} { align-content: space-around; }
}

& when not (@flex-wrap-breakpoints = false) {

    .render-responsive-rulesets(@flex-wrap-breakpoints; flex-wrap);
}


// Sub-object: `flex__item`
// ========================================================================

.@{flex-ns}flex__item { box-sizing: border-box; }


// Item alignment
// Sub-modifiers: `flex__item--*`
// ========================================================================

// Override default alignment of single item when specified by `align-items`

.mixin(flex-item-alignment) {

    .@{flex-ns}flex__item--start@{breakpoint} { align-self: flex-start; }
    .@{flex-ns}flex__item--end@{breakpoint} { align-self: flex-end; }
    .@{flex-ns}flex__item--center@{breakpoint} { align-self: flex-center; }
    .@{flex-ns}flex__item--stretch@{breakpoint} { align-self: flex-stretch; }
    .@{flex-ns}flex__item--baseline@{breakpoint} { align-self: flex-baseline; }
    .@{flex-ns}flex__item--auto@{breakpoint} { align-self: flex-auto; }           
}

& when not (@flex-item-alignment-breakpoints = false) {

    .render-responsive-rulesets(@flex-item-alignment-breakpoints; flex-item-alignment);
}


// Item ordering
// Sub-modifiers: `flex__item--*`
// ========================================================================

.mixin(flex-item-order) {

    // Default is 0
    .@{flex-ns}flex__item--first@{breakpoint} { order: -1; }
    .@{flex-ns}flex__item--last@{breakpoint} { order: 99; }
    .@{flex-ns}flex__item--order-default@{breakpoint} { order: 0; }       
}

& when not (@flex-item-order-breakpoints = false) {

    .render-responsive-rulesets(@flex-item-order-breakpoints; flex-item-order);
}


// Item dimensions
// Sub-modifiers: `flex__item--*`
// ========================================================================

.mixin(flex-item-dimension) {

    // Initial: 0 1 auto
    // Content dimensions, but shrinks

    // No Flex: 0 0 auto
    // Content dimensions

    .@{flex-ns}flex__item--none@{breakpoint} { flex: none !important; }

    // Relative Flex: 1 1 auto
    // Space is allocated considering content
    // 1. Fixes flex-shrink value in IE10

    .@{flex-ns}flex__item--auto@{breakpoint} {
        flex: auto !important;
        // 1
        -ms-flex-negative: 1 !important;
    }

    // Absolute Flex: 1 1 0%
    // Space is allocated solely based on flex

    .@{flex-ns}flex__item--1@{breakpoint} { flex: 1 !important; }         
}

& when not (@flex-item-dimension-breakpoints = false) {

    .render-responsive-rulesets(@flex-item-dimension-breakpoints; flex-item-dimension);
}


// Equal-width modifier
// Modifier: `flex--equal`
// ========================================================================

// This layout algorithm will create equal-width elements, irrespective of
// the width of their content.

.mixin(flex-equal) {

    .@{flex-ns}flex--equal@{breakpoint} > * { flex: 1 !important; }
}

& when not (@flex-equal-breakpoints = false) {

    .render-responsive-rulesets(@flex-equal-breakpoints; flex-equal);
}


// Hooks
// ========================================================================

.hook-flex-misc;

.hook-flex-misc() {}