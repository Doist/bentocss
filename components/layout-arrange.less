// Name:            Arrange
// Description:     Arranges/aligns cells, a bit like display:flex but display:table based
//
// Namespace:       `arrange-*`
//
// Sub-objects:     `arrange__item`
//                  `arrange__object-intrinsic-fill`
//                  `arrange__object-intrinsic-fit`
//                  `arrange__object-intrinsic-stretch`
//                  `arrange__object-center`
//                  `arrange__object-end`
//                  `arrange__object-start`
//
// Modifiers:       `arrange--fit`
//                  `arrange--bottom`
//                  `arrange--middle`
//                  `arrange--equal`
//                  `arrange--gutter-md`
//                  `arrange--gutter-sm`
//
// Sub-modifiers:   `arrange__item--fill`
//
// Dependencies:    vars-base
//                  tool-responsive
//
// Markup:
//
// <!-- arrange -->
// <div class="arrange arrange--middle [arrange--gutter-md]">
//     <div class="arrange__item">
//         <img class="arrange__object-intrinsic-fit" src="img.png" alt="">
//     </div>
//     <div class="arrange__item arrange__item--fill">
//         Nicolas Gallagher @necolas
//     </div>
// </div>
//
// <!-- arrange--equal -->
// <ul class="arrange arrange--equal">
//     <li class="arrange__item">
//         <button class="button width-full">Reply</button>
//     </li>
//     <li class="arrange__item">
//         <button class="button width-full">Like</button>
//     </li>
//     <li class="arrange__item">
//         <button class="button width-full">Save</button>
//     </li>
// </ul>
//
// Based on:
//
// https://github.com/suitcss/components-arrange/blob/0.6.2/lib/arrange.css
// https://github.com/inuitcss/objects.flag/tree/0.3.2
// http://getbootstrap.com/components/#list-group
// http://semantic-ui.com/elements/list.html
// http://semantic-ui.com/collections/menu.html
//
// Notes:
//
// Makes use of child combinator `>` to allow for component nesting.
//
// Parent modifiers (indirect) `.arrange--middle > .arrange__item`
// could be by replaced by less convenient per-child modifiers (direct)
// `.arrange__item--middle`.
//
// ========================================================================


// Variables
// ========================================================================

@arrange-ns:                                    @ns;

@arrange-breakpoints:                           false;
@arrange-item-breakpoints:                      base;
@arrange-object-intrinsic-breakpoints:          base;
@arrange-object-align-breakpoints:              base;
@arrange-width-breakpoints:                     base;
@arrange-alignment-vertical-breakpoints:        false;
@arrange-equal-breakpoints:                     false;
@arrange-gutter-breakpoints:                    base;

@arrange-gutter-horizontal:                     @base-gutter;
@arrange-gutter-vertical:                       @base-gutter;

@arrange-gutter-large-horizontal:               @base-gutter-large;
@arrange-gutter-large-vertical:                 @base-gutter-large;

@arrange-gutter-small-horizontal:               @base-gutter-small;
@arrange-gutter-small-vertical:                 @base-gutter-small;


// ========================================================================
// Component: Arrange
// ========================================================================

[class^='@{arrange-ns}arrange-\@'],
[class*=' @{arrange-ns}arrange-\@'] {
    display: block;
}

// 1. Zero out any default spacing that might be on an element (e.g., `li`);
//    Margin has no effect when coupled with `display: table-cell`.

.@{arrange-ns}arrange__item {
    // 1
    padding: 0;
    display: block;
}

.mixin(arrange-breakpoints) {

    // This component lets you lay out a row of cells in various ways. You can
    // specify whether a cell should be wide enough to fit its content, or take up
    // the remaining space in the row. It's also possible to give all cells an
    // equal width, and to control their vertical alignment.

    // Any width

    // 1. Protect against the component expanding beyond the confines of its
    //    container if properties affecting the box-model are applied to the
    //    component. Mainly necessary because of (5).
    // 2. Rely on table layout.
    // 3. Zero out the default spacing that might be on an element (e.g., `ul`).
    // 4. Make sure the component fills at least the full width of its parent.
    // 5. Reset the table-layout algorithm in case a component is nested.

    .@{arrange-ns}arrange@{breakpoint} {
        // 1
        box-sizing: border-box;
        // 2
        display: table;
        // 3
        margin: 0;
        padding: 0;
        // 4
        min-width: 100%;
        // 5
        table-layout: auto;
    }

    // There are two possible types of child. `arrange__item--fill` will expand to fill all
    // of the remaining space not filled by regular `arrange__item` elements.
    //
    // 1. All cells are top-aligned by default

    .@{arrange-ns}arrange@{breakpoint} > .@{arrange-ns}arrange__item {
        display: table-cell;
        // 1
        vertical-align: top;
    }
}

& when not (@arrange-breakpoints = false) {

    .render-responsive-rulesets(@arrange-breakpoints; arrange-breakpoints);
}

// Make sure the main content block expands to fill the remaining space.

.mixin(arrange-item) {

    .@{arrange-ns}arrange__item--fill@{breakpoint} { width: 100%; }    
}

& when not (@arrange-item-breakpoints = false) {

    .render-responsive-rulesets(@arrange-item-breakpoints; arrange-item);
}

.mixin(arrange-object-intrinsic) {

    // Where possible, protect against large images breaking the layout. Prevent them from
    // exceeding the width of the main content block by making them fluid.
    //
    // Only work for all browsers with the `arrange--equal` variant. For Firefox
    // and IE to constrain image dimensions for other layouts, large images will
    // need their width set to `100%`.

    .@{arrange-ns}arrange__object-intrinsic-fill@{breakpoint} {
        height: auto;
        max-width: 100%;
    }

    .@{arrange-ns}arrange__object-intrinsic-stretch@{breakpoint} {
        height: auto;
        width: 100%;
    }

    // Defend against a side-effect of this layout pattern: images in regular
    // 'arrange__item' cannot be fluid, otherwise they lose their ability to
    // provide size to a cell.

    .@{arrange-ns}arrange__object-intrinsic-fit@{breakpoint} {
        max-width: none !important;
        width: auto !important;
    }
}

& when not (@arrange-object-intrinsic-breakpoints = false) {

    .render-responsive-rulesets(@arrange-object-intrinsic-breakpoints; arrange-object-intrinsic);
}


// Object positioning.

.mixin(arrange-object-align) {

    .@{arrange-ns}arrange__object-start@{breakpoint} { float: @start; }
    .@{arrange-ns}arrange__object-end@{breakpoint} { float: @end; }

    .@{arrange-ns}arrange__object-center@{breakpoint} {
        display: table;
        margin-right: auto;
        margin-left: auto;
    }                
}

& when not (@arrange-object-align-breakpoints = false) {

    .render-responsive-rulesets(@arrange-object-align-breakpoints; arrange-object-align);
}


// Width modifiers
// Modifier: `arrange--fit`
// ========================================================================

.mixin(arrange-width) {

    .@{arrange-ns}arrange--fit@{breakpoint} { min-width: 0; }            
}

& when not (@arrange-width-breakpoints = false) {

    .render-responsive-rulesets(@arrange-width-breakpoints; arrange-width);
}


// Vertical alignment modifiers
// Modifier: `arrange--middle`, `arrange--bottom`
// ========================================================================

.mixin(arrange-alignment-vertical) {

    .@{arrange-ns}arrange--baseline@{breakpoint} > .@{arrange-ns}arrange__item { vertical-align: baseline; }
    .@{arrange-ns}arrange--bottom@{breakpoint} > .@{arrange-ns}arrange__item { vertical-align: bottom; }
    .@{arrange-ns}arrange--middle@{breakpoint} > .@{arrange-ns}arrange__item { vertical-align: middle; }
    .@{arrange-ns}arrange--top@{breakpoint} > .@{arrange-ns}arrange__item { vertical-align: top; }        
}

& when not (@arrange-alignment-vertical-breakpoints = false) {

    .render-responsive-rulesets(@arrange-alignment-vertical-breakpoints; arrange-alignment-vertical);
}


// Equal-width modifier
// Modifier: `arrange--equal`
// ========================================================================

.mixin(arrange-equal) {

    // This layout algorithm will create equal-width table cells, irrespective of
    // the width of their content.
    //
    // 1. The layout algorithm requires a set width to correctly calculate table
    //    cell width.

    .@{arrange-ns}arrange--equal@{breakpoint} {
        table-layout: fixed;
        // 1
        width: 100%;
    }

    // Give the cells an equal width. This value ensures that Arrange is still 100%
    // wide when gutters are used in conjunctions with equal-width cells.

    .@{arrange-ns}arrange--equal@{breakpoint} > .@{arrange-ns}arrange__item {
        width: 1%;
    }    
}

& when not (@arrange-equal-breakpoints = false) {

    .render-responsive-rulesets(@arrange-equal-breakpoints; arrange-equal);
}


// Arrange gutter
// ========================================================================

// Add a gutter between cells
//
// NOTE: this can trigger a horizontal scrollbar if the component is as wide as
// the viewport. Use padding on a container, or `overflow-x:hidden` to protect
// against it.

// Modifiers: `arrange--gutter-sm`, `arrange--gutter-md`
// ========================================================================

.mixin(arrange-gutter) {    

    // Small gutter

    // Horizontal
    .@{arrange-ns}arrange--gutter-sm@{breakpoint} > .@{arrange-ns}arrange__item:nth-child(n+2) {
        padding-@{start}: @arrange-gutter-small-horizontal;
    }

    // Medium gutter

    // Horizontal
    .@{arrange-ns}arrange--gutter-md@{breakpoint} > .@{arrange-ns}arrange__item:nth-child(n+2) {
        padding-@{start}: @arrange-gutter-horizontal;
    }          
}

& when not (@arrange-gutter-breakpoints = false) {

    .render-responsive-rulesets(@arrange-gutter-breakpoints; arrange-gutter);
}


// Hooks
// ========================================================================

.hook-arrange-misc;

.hook-arrange-misc() {}