// Name:            Grid
// Description:     Provides a responsive, fluid and nestable grid
//
// Namespace:       `grid`
//                  `grid-divider`
//                  `grid-ib`
//                  `container`
//
// Sub-objects:     `grid__cell`
//
// Modifiers:       `grid--gutter-0`
//                  `grid--gutter-sm`
//                  `grid--gutter-md`
//                  `grid--align-center`
//                  `grid--align-end`
//                  `grid--align-middle`
//                  `grid--align-bottom`
//                  `grid--divider`
//                  `grid--match`
//                  `grid--width-*`
//
// Sub-modifiers:   `grid__cell--center`
//
// Dependencies:    vars-base
//                  tool-responsive
//
// Uses:            Layout: `width-*`
//
// Markup:
//
// <!-- grid -->
// <div class="grid">
//     <div class="grid__cell width-1-2"></div>
//     <div class="grid__cell width-1-2"></div>
// </div>
//
// <!-- grid--divider -->
// <div class="grid grid--divider">
//     <div class="grid__cell width-1-2"></div>
//     <div class="grid__cell width-1-2"></div>
// </div>
// <hr class="grid-divider">
// <div class="grid grid--divider">
//     <div class="grid__cell width-1-2"></div>
//     <div class="grid__cell width-1-2"></div>
// </div>
//
// Based on:
//
// https://github.com/uikit/uikit/blob/v2.17.0/src/less/core/grid.less
// https://github.com/suitcss/components-grid/blob/2.0.2/lib/grid.css
// https://github.com/zurb/foundation/blob/v5.5.1/scss/foundation/components/_block-grid.scss
//
// Notes:
//
// Makes use of child combinator `>` to allow for component nesting,
// as well as for sharing the same `.grid_cell` child name between the
// `.grid` and `.grid-ib` parents.
//
// Parent selectors (indirect) `.grid > .grid__cell` and `.grid-ib > .grid__cell`
// could be by replaced by less convenient per-child selectors (direct)
// `.grid__cell--block` and `.grid__cell--inline-block`.
//
// Parent modifiers (indirect) such as `.grid--gutter-0 > .grid__cell`
// could be replaced by less convenient per-child modifiers (direct)
// `.grid__cell--collapse`, while `.grid--width-1-2 > .grid__cell` by
// per-child size utilities `.width-1-2`.
//
// ========================================================================


// Variables
// ========================================================================

@grid-ns:                                       @ns;

@grid-enable-inline-block:                      false;
@grid-enable-modifier-divider:                  false;
@grid-enable-modifier-match:                    false;
@grid-enable-modifier-inline-block:             false;
@grid-enable-container:                         false;

@grid-gutter-horizontal:                        @base-gutter;
@grid-gutter-vertical:                          @base-gutter;

@grid-gutter-modifiers-breakpoints:             false;

@grid-gutter-large-horizontal:                  @base-gutter-large;
@grid-gutter-large-vertical:                    @base-gutter-large;

@grid-gutter-small-horizontal:                  @base-gutter-small;
@grid-gutter-small-vertical:                    @base-gutter-small;

@grid-divider-breakpoint:                       @breakpoint-xlarge;

@grid-divider-border:                           @base-color-border;
@grid-divider-border-width:                     @base-border-width;

@grid-container-breakpoint:                     @breakpoint-xlarge;

@grid-container-max-width:                      980/@px;
@grid-container-padding-horizontal:             @base-gutter;

@grid-container-large-max-width:                1200/@px;
@grid-container-large-padding-horizontal:       @base-gutter-large;

@grid-inline-block-font-size:                   @base-font-size;

@grid-even-breakpoints:                         false;


// ========================================================================
// Component: Grid
// ========================================================================

// Float based grids
// ========================================================================

// 1. Makes grid more robust so that it can be used with other block elements like lists

.@{grid-ns}grid {
    display: flex;
    flex-wrap: wrap;
    // 1
    margin: 0;
    padding: 0;
    list-style: none;
}

// DEPRECATED
// Micro clearfix
// Can't use `table` because it creates a 1px gap when it becomes a flex item, only in Webkit

.@{grid-ns}grid::before,
.@{grid-ns}grid::after {
    content: "";
    display: block;
    overflow: hidden;
}

.@{grid-ns}grid::after { clear: both; }

// Grid cell
// 1. Makes grid more robust so that it can be used with other block elements
// 2. Space is allocated solely based on content dimensions
// 3. DEPRECATED Using `float` to support IE9

.@{grid-ns}grid__cell {
    box-sizing: border-box;
    // 1
    margin: 0;
    padding: 0;
}

.@{grid-ns}grid > .@{grid-ns}grid__cell {
    // 2
    flex: none;
    // 3
    float: @start;
}

// Remove margin from the last-child
 
.@{grid-ns}grid__cell > :last-child { margin-bottom: 0; }


// Inline-block based grids
// ========================================================================

& when (@grid-enable-inline-block = true) {

    // All content must be contained within child `grid__cell` elements.
    //
    // 1. Account for browser defaults of elements that might be the root node of
    //    the component.
    // 2. Remove inter-cell whitespace that appears between `inline-block` child
    //    elements.
    // 3. Ensure consistent default alignment.

    .@{grid-ns}grid-ib {
        // 1
        display: block;
        list-style: none;
        margin: 0;
        padding: 0;
        // 2
        font-size: 0;
        // 3
        text-align: @start;
    }

    // Grid cell
    //
    // 1. Fundamentals of the non-float grid layout.
    // 2. Reset font size change made in `grid-ib`.
    // 3. Keeps content correctly aligned with the grid direction.
    // 4. Controls vertical positioning of units.
    // 5. Make cells full-width by default.

    .@{grid-ns}grid-ib > .@{grid-ns}grid__cell {
        // 1
        display: inline-block;
        // 2
        font-size: @grid-inline-block-font-size;
        // 3
        text-align: @start;
        // 4
        vertical-align: top;
        // 5
        width: 100%;
    }
}

// Grid gutter
// ========================================================================

// Default gutter

// Horizontal
.@{grid-ns}grid,
.@{grid-ns}grid-ib { margin-@{start}: -@grid-gutter-horizontal; }

.@{grid-ns}grid > .@{grid-ns}grid__cell,
.@{grid-ns}grid-ib > .@{grid-ns}grid__cell { padding-@{start}: @grid-gutter-horizontal; }

// Vertical
.@{grid-ns}grid > .@{grid-ns}grid__cell,
.@{grid-ns}grid-ib > .@{grid-ns}grid__cell { margin-bottom: @grid-gutter-vertical; }

.@{grid-ns}grid.@{grid-ns}grid--m-b-0,
.@{grid-ns}grid-ib.@{grid-ns}grid--m-b-0 { margin-bottom: -@grid-gutter-vertical; }    

// Collapse gutter

// Horizontal
.@{grid-ns}grid--gutter-0 { margin-@{start}: 0; }
.@{grid-ns}grid--gutter-0 > .@{grid-ns}grid__cell { padding-@{start}: 0; }

// Vertical
.@{grid-ns}grid--gutter-0 > .@{grid-ns}grid__cell { margin-bottom: 0; }


// Gutter modifiers

.mixin(grid-gutter-modifiers) {    

    // Small gutter

    // Horizontal
    .@{grid-ns}grid--gutter-sm@{breakpoint} { margin-@{start}: -@grid-gutter-small-horizontal; }
    .@{grid-ns}grid--gutter-sm@{breakpoint} > .@{grid-ns}grid__cell { padding-@{start}: @grid-gutter-small-horizontal; }

    // Vertical
    .@{grid-ns}grid--gutter-sm@{breakpoint} > .@{grid-ns}grid__cell { margin-bottom: @grid-gutter-small-vertical; }                
    .@{grid-ns}grid--gutter-sm@{breakpoint}.@{grid-ns}grid--m-b-0 { margin-bottom: -@grid-gutter-small-vertical; }

    // Medium gutter

    // Horizontal
    .@{grid-ns}grid--gutter-md@{breakpoint} { margin-@{start}: -@grid-gutter-horizontal; }
    .@{grid-ns}grid--gutter-md@{breakpoint} > .@{grid-ns}grid__cell { padding-@{start}: @grid-gutter-horizontal; }

    // Vertical
    .@{grid-ns}grid--gutter-md@{breakpoint} > .@{grid-ns}grid__cell { margin-bottom: @grid-gutter-vertical; }
    .@{grid-ns}grid--gutter-md@{breakpoint}.@{grid-ns}grid--m-b-0 { margin-bottom: -@grid-gutter-vertical; }          
}

& when not (@grid-gutter-modifiers-breakpoints = false) {

    .render-responsive-rulesets(@grid-gutter-modifiers-breakpoints; grid-gutter-modifiers);
}


// Modifier: `grid--divider`
// ========================================================================

& when (@grid-enable-modifier-divider = true) {

    // Cell divider
    // Only works with the default gutter. Does not work with gutter collapse, small or large.
    // Does not work with `push-*`, `pull-*` and not if the columns float into the next row.

    .@{grid-ns}grid--divider {
        margin-@{start}: -@grid-gutter-horizontal;
        margin-@{end}: -@grid-gutter-horizontal;
    }

    .@{grid-ns}grid--divider > .@{grid-ns}grid__cell {
        padding-@{start}: @grid-gutter-horizontal;
        padding-@{end}: @grid-gutter-horizontal;
    }

    .@{grid-ns}grid--divider > .@{grid-ns}grid__cell:not(:first-child) { border-@{start}: @grid-divider-border-width solid @grid-divider-border; }

    // Large screen and bigger
    @media (min-width: @grid-divider-breakpoint) {

        // Large gutter    

        .@{grid-ns}grid--divider {
            margin-@{start}: -@grid-gutter-large-horizontal;
            margin-@{end}: -@grid-gutter-large-horizontal;
        }

        .@{grid-ns}grid--divider > .@{grid-ns}grid__cell {
            padding-@{start}: @grid-gutter-large-horizontal;
            padding-@{end}: @grid-gutter-large-horizontal;
        }

    }

    // Row divider

    .@{grid-ns}grid-divider {
        margin-top: @grid-gutter-vertical;
        margin-bottom: @grid-gutter-vertical;
        border-top: @grid-divider-border-width solid @grid-divider-border;
    }

    // Large screen and bigger
    @media (min-width: @grid-divider-breakpoint) {

        .@{grid-ns}grid-divider {
            margin-top: @grid-gutter-large-vertical;
            margin-bottom: @grid-gutter-large-vertical;
        }

    }
}


// Match cell inner containers
// ========================================================================

& when (@grid-enable-modifier-match = true) {

    .@{grid-ns}grid--match > .@{grid-ns}grid__cell {
        display: flex;
    }

    // 1. Behave like a block element

    .@{grid-ns}grid--match > .@{grid-ns}grid__cell > * {
        flex: none;
        // 1
        box-sizing: border-box;
        width: 100%;
    }
}


// `grid-ib` modifiers
//
// Modifiers: `grid--align-center`, `grid--align-end`, `grid--align-middle`,
// `grid--align-bottom`
// ========================================================================

& when (@grid-enable-modifier-inline-block = true) {

    .@{grid-ns}grid--align-center {
        text-align: center;
    }

    .@{grid-ns}grid--align-end {
        text-align: @end;
    }

    .@{grid-ns}grid--align-middle > .@{grid-ns}grid__cell {
        vertical-align: middle;
    }

    .@{grid-ns}grid--align-bottom > .@{grid-ns}grid__cell {
        vertical-align: bottom;
    }

    // Modifier: horizontally center one unit
    // Set a specific unit to be horizontally centered. Doesn't affect
    // any other units. Can still contain a child `Grid` object.

    .@{grid-ns}grid-ib > .@{grid-ns}grid__cell--center {
        display: block;
        margin: 0 auto;
    }
}


// Even grid cell widths
// ========================================================================

// Supports: 2, 3, 4, 5, 6, 8, 10, 12 part

.grid-width-clear(@per-row) {
    &:nth-child(1n) { clear: none; }
    &:nth-child(@{per-row}n+1) { clear: both; }
}

.mixin(grid-even) {    

    .@{grid-ns}grid--width-1-2@{breakpoint} > .@{grid-ns}grid__cell { width: percentage(1/2); .grid-width-clear(2); }
    .@{grid-ns}grid--width-1-3@{breakpoint} > .@{grid-ns}grid__cell { width: percentage(1/3); .grid-width-clear(3); }
    .@{grid-ns}grid--width-1-4@{breakpoint} > .@{grid-ns}grid__cell { width: percentage(1/4); .grid-width-clear(4); }
    .@{grid-ns}grid--width-1-5@{breakpoint} > .@{grid-ns}grid__cell { width: percentage(1/5); .grid-width-clear(5); }
    .@{grid-ns}grid--width-1-6@{breakpoint} > .@{grid-ns}grid__cell { width: percentage(1/6); .grid-width-clear(6); }
    .@{grid-ns}grid--width-1-8@{breakpoint} > .@{grid-ns}grid__cell { width: percentage(1/8); .grid-width-clear(8); }
    .@{grid-ns}grid--width-1-10@{breakpoint} > .@{grid-ns}grid__cell { width: percentage(1/10); .grid-width-clear(10); }
    .@{grid-ns}grid--width-1-12@{breakpoint} > .@{grid-ns}grid__cell { width: percentage(1/12); .grid-width-clear(12); }
}

& when not (@grid-even-breakpoints = false) {

    [class^="@{grid-ns}grid--width-"] > .@{grid-ns}grid__cell,
    [class*=" @{grid-ns}grid--width-"] > .@{grid-ns}grid__cell {
        box-sizing: border-box;
        width: 100%;
    }

    .render-responsive-rulesets(@grid-even-breakpoints; grid-even);
}


// Object: `container`
// ========================================================================

& when (@grid-enable-container = true) {

    .@{grid-ns}container {
        box-sizing: border-box;
        margin-left: auto;
        margin-right: auto;
        max-width: @grid-container-max-width;
        padding: 0 @grid-container-padding-horizontal;
    }

    // Large screen and bigger
    @media (min-width: @grid-container-breakpoint) {

        .@{grid-ns}container {
            max-width: @grid-container-large-max-width;
            padding: 0 @grid-container-large-padding-horizontal;
        }

    }

    // Micro clearfix

    .@{grid-ns}container::before,
    .@{grid-ns}container::after {
        content: "";
        display: table;
    }

    .@{grid-ns}container::after { clear: both; }
}

// Hooks
// ========================================================================

.hook-grid-misc;

.hook-grid-misc() {}